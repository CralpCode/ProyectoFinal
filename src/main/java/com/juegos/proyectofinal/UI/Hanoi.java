/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.juegos.proyectofinal.UI;

import Acciones.Nodo;
import Acciones.Pila;
import Binarios.SerializarObjeto;
import Generadores.GenerarTiempo;
import Usuarios.CrearUsuarios;
import Usuarios.GuardBtns;
import java.io.Serializable;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author calin
 */
public class Hanoi extends javax.swing.JFrame implements Serializable{

    /**
     * Creates new form Principal
     */
    
    private int ContNumMov = 0;
    Pila PilaTorreA;
    Pila PilaTorreB;
    Pila PilaTorreC;
    
    DefaultTableModel ModeloTA, ModeloTB, ModeloTC;
    
    int objetivo = 0;
    
    double NumMinMov = 0;
    
    boolean stop = false;
    public static boolean Habilitar ;
    
    public Hanoi() {
        initComponents();
        
        BtnGuardar.setEnabled(true);
        GenerarTiempo tiemponuevo = new GenerarTiempo();
        tiemponuevo.setSize(75,38);
        tiemponuevo.setLocation(5,5);
        this.getContentPane().add(tiemponuevo);
        
        BtnGuardar.setVisible(false);
        Btnvolver.setVisible(false);
        
        BtnResolver.setEnabled(Habilitar);
        
        ModeloTA = (DefaultTableModel) TorreA.getModel();
        ModeloTA.setRowCount(10);
        ModeloTB = (DefaultTableModel) TorreB.getModel();
        ModeloTB.setRowCount(10);
        ModeloTC = (DefaultTableModel) TorreC.getModel();
        ModeloTC.setRowCount(10);
        
        DefaultTableCellRenderer renderA = new DefaultTableCellRenderer();
        renderA.setHorizontalAlignment(SwingConstants.CENTER);
        TorreA.getColumnModel().getColumn(0).setCellRenderer(renderA);
        
        DefaultTableCellRenderer renderB = new DefaultTableCellRenderer();
        renderB.setHorizontalAlignment(SwingConstants.CENTER);
        TorreB.getColumnModel().getColumn(0).setCellRenderer(renderB);
        
        DefaultTableCellRenderer renderC = new DefaultTableCellRenderer();
        renderC.setHorizontalAlignment(SwingConstants.CENTER);
        TorreC.getColumnModel().getColumn(0).setCellRenderer(renderC);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        TorreB = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        TorreC = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        TorreA = new javax.swing.JTable();
        BtnAB = new javax.swing.JButton();
        BtnAC = new javax.swing.JButton();
        BtnBA = new javax.swing.JButton();
        BtnBC = new javax.swing.JButton();
        BtnCA = new javax.swing.JButton();
        BtnCB = new javax.swing.JButton();
        NumDiscos = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        NumMv = new javax.swing.JLabel();
        MinMv = new javax.swing.JLabel();
        BtnIniciar = new javax.swing.JButton();
        BtnResolver = new javax.swing.JButton();
        BtnRendirse = new javax.swing.JButton();
        Btnvolver = new javax.swing.JButton();
        BtnGuardar = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        TorreB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "TorreB"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TorreB.setAutoscrolls(false);
        TorreB.setFocusable(false);
        TorreB.setRowSelectionAllowed(false);
        jScrollPane1.setViewportView(TorreB);
        if (TorreB.getColumnModel().getColumnCount() > 0) {
            TorreB.getColumnModel().getColumn(0).setResizable(false);
        }

        TorreC.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "TorreC"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TorreC.setAutoscrolls(false);
        TorreC.setEnabled(false);
        TorreC.setRowSelectionAllowed(false);
        jScrollPane2.setViewportView(TorreC);
        if (TorreC.getColumnModel().getColumnCount() > 0) {
            TorreC.getColumnModel().getColumn(0).setResizable(false);
        }

        TorreA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "TorreA"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TorreA.setAutoscrolls(false);
        TorreA.setFocusable(false);
        TorreA.setRowSelectionAllowed(false);
        jScrollPane3.setViewportView(TorreA);
        if (TorreA.getColumnModel().getColumnCount() > 0) {
            TorreA.getColumnModel().getColumn(0).setResizable(false);
        }

        BtnAB.setText("B");
        BtnAB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnABActionPerformed(evt);
            }
        });

        BtnAC.setText("C");
        BtnAC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnACActionPerformed(evt);
            }
        });

        BtnBA.setText("A");
        BtnBA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnBAActionPerformed(evt);
            }
        });

        BtnBC.setText("C");
        BtnBC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnBCActionPerformed(evt);
            }
        });

        BtnCA.setText("A");
        BtnCA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnCAActionPerformed(evt);
            }
        });

        BtnCB.setText("B");
        BtnCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnCBActionPerformed(evt);
            }
        });

        NumDiscos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "3", "4", "5", "6", "7", "8", "9", "10" }));

        jLabel1.setText("Numero de Discos");

        jLabel2.setText("Numero minimo de movimientos");

        jLabel3.setText("Numero de movimientos");

        NumMv.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        NumMv.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(0, 0, 0)));
        NumMv.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        MinMv.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        MinMv.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(0, 0, 0)));
        MinMv.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        BtnIniciar.setText("Iniciar");
        BtnIniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnIniciarActionPerformed(evt);
            }
        });

        BtnResolver.setText("Resolver");
        BtnResolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnResolverActionPerformed(evt);
            }
        });

        BtnRendirse.setText("Rendirse");
        BtnRendirse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnRendirseActionPerformed(evt);
            }
        });

        Btnvolver.setText("Volver al menu");
        Btnvolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnvolverActionPerformed(evt);
            }
        });

        BtnGuardar.setText("Guardar");
        BtnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnGuardarActionPerformed(evt);
            }
        });

        jMenu1.setText("Opciones");
        jMenu1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu1MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(BtnAB, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                    .addGap(84, 84, 84)
                                                    .addComponent(BtnBA, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(BtnBC, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(layout.createSequentialGroup()
                                                    .addGap(56, 56, 56)
                                                    .addComponent(jLabel1)))
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(BtnRendirse)
                                                .addComponent(jLabel2))))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGap(22, 22, 22)
                                        .addComponent(BtnIniciar))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(BtnAC, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(40, 40, 40)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(40, 40, 40)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(BtnCA, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(BtnCB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(30, 30, 30)
                                        .addComponent(NumDiscos, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(BtnResolver)
                                        .addGap(19, 19, 19))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(72, 72, 72)
                                .addComponent(jLabel3)
                                .addGap(81, 81, 81)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(MinMv, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(NumMv, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addComponent(BtnGuardar)
                    .addComponent(Btnvolver))
                .addGap(0, 97, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(Btnvolver, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(BtnGuardar)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BtnAB)
                    .addComponent(BtnAC)
                    .addComponent(BtnBA)
                    .addComponent(BtnBC)
                    .addComponent(BtnCA)
                    .addComponent(BtnCB))
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(NumDiscos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(MinMv, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(NumMv, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BtnResolver)
                    .addComponent(BtnIniciar)
                    .addComponent(BtnRendirse))
                .addGap(28, 28, 28))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void limpiar(){
        ContNumMov = 0;
        NumMinMov = 0;
    }
    
    private void CantMov(){
        ContNumMov ++;
        NumMv.setText(String.valueOf(ContNumMov));
        
    }
    
    private void Mover(Pila valor,Pila valor2){
    
        try {
            
            if (valor.getContNodo() > 0) {
                
                Nodo Plataforma = new Nodo();
                
                Plataforma.setDato(valor.peek());
                
                if (valor2.getContNodo() > 0) {
                    
                    if(Plataforma.getDato().compareTo(valor2.peek())>0){
                    
                        return;
                    }
                    
                }
                
                valor.Pop();
                valor2.Push(Plataforma);
                
                
                
                if(valor == PilaTorreA){
                    PresTorreA();
                }
                
                if(valor == PilaTorreB){
                    PresTorreB();
                }
                
                if(valor == PilaTorreC){
                    PresTorreC();
                }
                    
                if(valor2 == PilaTorreA){
                    PresTorreA();
                }
                
                if(valor2 == PilaTorreB){
                    PresTorreB();
                }
                
                if(valor2 == PilaTorreC){
                    PresTorreC();
                }
                
                CantMov();
                
                if(PilaTorreC.getContNodo() == objetivo && ContNumMov != NumMinMov || PilaTorreC.getContNodo() == objetivo && ContNumMov == NumMinMov){
                    JOptionPane.showMessageDialog(null,"Felicidades Ganaste", "Felicitaciones", JOptionPane.INFORMATION_MESSAGE);
                    this.setVisible(false);
                    new Ventana().setVisible(true);
                }
                
            }
            
        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        }
        
    }
    
    private void BtnABActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnABActionPerformed
        Mover(PilaTorreA,PilaTorreB);
    }//GEN-LAST:event_BtnABActionPerformed

    private void BtnACActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnACActionPerformed
        Mover(PilaTorreA,PilaTorreC);
    }//GEN-LAST:event_BtnACActionPerformed

    private void BtnBAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnBAActionPerformed
        Mover(PilaTorreB,PilaTorreA);
    }//GEN-LAST:event_BtnBAActionPerformed

    private void BtnBCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnBCActionPerformed
       Mover(PilaTorreB,PilaTorreC);
    }//GEN-LAST:event_BtnBCActionPerformed

    private void BtnCAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnCAActionPerformed
        Mover(PilaTorreC,PilaTorreA);
    }//GEN-LAST:event_BtnCAActionPerformed

    private void BtnCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnCBActionPerformed
       Mover(PilaTorreC,PilaTorreB);
    }//GEN-LAST:event_BtnCBActionPerformed

    private void BtnIniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnIniciarActionPerformed
        BtnIniciar.setEnabled(false);
        iniciar();
        
        
    }//GEN-LAST:event_BtnIniciarActionPerformed

    private void BtnResolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnResolverActionPerformed
        if (!MinMv.getText().equals("") && PilaTorreC.getContNodo() != objetivo) {
            
            limpiar();
            stop = false;
            
            ResolverHanoi(objetivo, PilaTorreA, PilaTorreB, PilaTorreC);
            this.setVisible(false);
            new Ventana().setVisible(true);
        }

    }//GEN-LAST:event_BtnResolverActionPerformed

    private void BtnRendirseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnRendirseActionPerformed
        this.setVisible(false);
        new Ventana().setVisible(true);
    }//GEN-LAST:event_BtnRendirseActionPerformed

    private void jMenu1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu1MouseClicked
       Btnvolver.setVisible(true);
       BtnGuardar.setVisible(true);
    }//GEN-LAST:event_jMenu1MouseClicked

    private void BtnvolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnvolverActionPerformed
        this.setVisible(false);
        new Ventana().setVisible(true);
    }//GEN-LAST:event_BtnvolverActionPerformed

    private void BtnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnGuardarActionPerformed
       guardar();
       BtnGuardar.setEnabled(false);
    }//GEN-LAST:event_BtnGuardarActionPerformed

    private void iniciar(){
        
        try {
            
        PilaTorreA = new Pila();
        PilaTorreB = new Pila();
        PilaTorreC = new Pila();
        
        objetivo = Integer.parseInt(NumDiscos.getSelectedItem().toString());
        
        NumMinMov = Math.pow(2, objetivo)-1;
        
        NumMv.setText(String.valueOf(ContNumMov));
        
        MinMv.setText(String.valueOf(String.format("%.0f", NumMinMov)));
        
        for (int i = objetivo; i >= 1  ; i--) {
            
               Nodo Plataforma = new Nodo();
               
               String Disco = "";
               
               for (int j = i; j > 0; j--) {
                
                   Disco+= "#";
                   
            }
               
               Plataforma.setDato(Disco);
               
               PilaTorreA.Push(Plataforma);
            
        }
            PresTorreA();
            PresTorreB();
            PresTorreC();
            
        
            
        } catch (Exception e) {
            
            System.err.println("Error" + e.getMessage());
            
        }
    
        
        
    }
    
    private void PresTorreA(){
        ((DefaultTableModel)TorreA.getModel()).setRowCount(0);
        ModeloTA.setRowCount(10);
        
        Nodo K;
        
        int RowDisco = (10 - PilaTorreA.getContNodo());
        
        if (PilaTorreA.getContNodo() > 0) {
            
            for(K = PilaTorreA.getCabeza(); K.getAbajo() != null; K = K.getAbajo()){
            
                String[] Vectornormal = {K.getDato()};
                        
                 ModeloTA.insertRow(RowDisco, Vectornormal);
                 RowDisco++;
                
            }
            
            if (K.getAbajo() == null) {
                
                String[] Vectornormal = {K.getDato()};
                        
                 ModeloTA.insertRow(RowDisco, Vectornormal);
            }
            
        }
        
        TorreA.setModel(ModeloTA);
        ModeloTA.setRowCount(10);
        
    }

    private void PresTorreB(){
    
        ((DefaultTableModel)TorreB.getModel()).setRowCount(0);
        ModeloTB.setRowCount(10);
        
        Nodo K;
        
        int RowDisco = (10 - PilaTorreB.getContNodo());
        
        if (PilaTorreB.getContNodo() > 0) {
            
            for(K = PilaTorreB.getCabeza(); K.getAbajo() != null; K = K.getAbajo()){
            
                String[] Vectornormal = {K.getDato()};
                        
                 ModeloTB.insertRow(RowDisco, Vectornormal);
                 RowDisco++;
                
            }
            
            if (K.getAbajo() == null) {
                
                String[] Vectornormal = {K.getDato()};
                        
                 ModeloTB.insertRow(RowDisco, Vectornormal);
            }
            
        }
        
        TorreB.setModel(ModeloTB);
        ModeloTB.setRowCount(10);
        
    }
        
    private void PresTorreC(){
    
        ((DefaultTableModel)TorreC.getModel()).setRowCount(0);
        ModeloTC.setRowCount(10);
        
        Nodo K;
        
        int RowDisco = (10 - PilaTorreC.getContNodo());
        
        if (PilaTorreC.getContNodo() > 0) {
            
            for(K = PilaTorreC.getCabeza(); K.getAbajo() != null; K = K.getAbajo()){
            
                String[] Vectornormal = {K.getDato()};
                        
                 ModeloTC.insertRow(RowDisco, Vectornormal);
                 RowDisco++;
                
            }
            
            if (K.getAbajo() == null) {
                
                String[] Vectornormal = {K.getDato()};
                        
                 ModeloTC.insertRow(RowDisco, Vectornormal);
            }
            
        }
        
        TorreC.setModel(ModeloTC);
        ModeloTC.setRowCount(10);
        
    }    
    
    private void moverPlat(Pila Origen,Pila Destino){
    
        if (stop == false) {
            
            Nodo Plataforma = new Nodo();
            
            Plataforma.setDato(Origen.peek());
            
            Origen.Pop();
            
            Destino.Push(Plataforma);
            
            PresTorreA();
            PresTorreB();
            PresTorreC();
            CantMov();
            
            JOptionPane pane = new JOptionPane("Paso # " + NumMv.getText() + "\n\n continuar ",JOptionPane.QUESTION_MESSAGE, JOptionPane.YES_NO_OPTION);
            
            JDialog dialog = pane.createDialog("Numero de pasos");
            
            dialog.setLocation(600, 200);
            dialog.setVisible(true);
            
            int option = (int ) pane.getValue();
            
            if (option == JOptionPane.NO_OPTION){
                stop = true;
            }
            
        }
        
    }
    
    private void ResolverHanoi(int n, Pila Origen, Pila Aux, Pila Destino){
            
        if (n == 1) {
            moverPlat(Origen, Destino);
        }else{
        
            ResolverHanoi(n-1, Origen, Destino, Aux);
            moverPlat(Origen, Destino);

            ResolverHanoi(n-1, Aux, Origen, Destino);
        
        }
        
    }
    
    private void guardar(){
    
        SerializarObjeto.serializarObjeto(CrearUsuarios.UsuGuard[CrearUsuarios.valor]+".bin", this);
    
    }
    
    private void Cargar(){
    
        Hanoi tmpBtns = SerializarObjeto.deserializarObjeto(CrearUsuarios.UsuGuard[CrearUsuarios.contador]+".bin", Hanoi.class);
        
        
        
    
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnAB;
    private javax.swing.JButton BtnAC;
    private javax.swing.JButton BtnBA;
    private javax.swing.JButton BtnBC;
    private javax.swing.JButton BtnCA;
    private javax.swing.JButton BtnCB;
    private javax.swing.JButton BtnGuardar;
    private javax.swing.JButton BtnIniciar;
    private javax.swing.JButton BtnRendirse;
    private javax.swing.JButton BtnResolver;
    private javax.swing.JButton Btnvolver;
    private javax.swing.JLabel MinMv;
    private javax.swing.JComboBox<String> NumDiscos;
    private javax.swing.JLabel NumMv;
    private javax.swing.JTable TorreA;
    private javax.swing.JTable TorreB;
    private javax.swing.JTable TorreC;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables

    public void setHabilitar(boolean Habilitar) {
        this.Habilitar = Habilitar;
    }
    
}
